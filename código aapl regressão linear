import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Baixar dados históricos da Apple (AAPL)
ticker = "AAPL"
df = yf.download(ticker, start="2020-01-01", end="2024-01-01")

# Utilizando a coluna 'Close' ao invés de 'Adj Close'
df = df[['Close']]
df['Days'] = np.arange(len(df))  # Criando um índice numérico baseado no tempo

# Definir variáveis independentes (X) e dependentes (y)
X = df[['Days']]
y = df['Close']

# Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criando e treinando o modelo de Regressão Linear
model = LinearRegression()
model.fit(X_train, y_train)

# Fazer previsões
y_pred = model.predict(X_test)

# Avaliação do modelo
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f'Mean Absolute Error (MAE): {mae}')
print(f'Root Mean Squared Error (RMSE): {rmse}')

# Previsões futuras
future_days = 30
future_X = np.arange(len(df), len(df) + future_days).reshape(-1, 1)
future_pred = model.predict(future_X)

# Visualizando os resultados
plt.figure(figsize=(10, 5))
plt.scatter(X, y, label="Dados Históricos", color="blue", alpha=0.5)
plt.plot(X, model.predict(X), color="red", label="Regressão Linear")
plt.plot(future_X, future_pred, color="green", linestyle="dashed", label="Previsão Futura")
plt.xlabel("Dias")
plt.ylabel("Preço de Fechamento ($)")
plt.legend()
plt.title(f"Regressão Linear para Previsão de Preços - {ticker}")
plt.show()

